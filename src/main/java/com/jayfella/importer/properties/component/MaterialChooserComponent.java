package com.jayfella.importer.properties.component;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jayfella.importer.config.DevKitConfig;
import com.jayfella.importer.service.JmeEngineService;
import com.jayfella.importer.service.ServiceManager;
import com.jme3.asset.AssetManager;
import com.jme3.material.Material;
import com.jme3.material.Materials;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class MaterialChooserComponent extends ReflectedSdkComponent<Material> {

    private static final String[] materialExtensions = new String[]{".j3md", ".j3m"};

    private JComboBox<String> materialsComboBox;
    private JPanel contentPanel;

    public MaterialChooserComponent() {
        super(null, null, null);
    }

    public MaterialChooserComponent(Object parent, Method getter, Method setter) {
        super(parent, getter, setter);

        try {
            setValue((Material) getter.invoke(parent));
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }

        // get all available materials.
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement(Materials.UNSHADED);
        model.addElement(Materials.LIGHTING);
        model.addElement(Materials.PBR);


        // get a list of all textures in the asset root.
        List<Path> materialFiles = null;

        try {
            materialFiles = Files.walk(new File(DevKitConfig.getInstance().getProjectConfig().getAssetRootDir()).toPath())
                    .filter(p -> {
                        for (String ext : materialExtensions) {
                            if (p.toString().endsWith(ext)) {
                                return true;
                            }
                        }
                        return false;
                    })
                    .collect(Collectors.toList());

        } catch (IOException e) {
            e.printStackTrace();
        }

        if (materialFiles != null) {
            // DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            for (Path path : materialFiles) {

                String relativePath = path.toString().replace(DevKitConfig.getInstance().getProjectConfig().getAssetRootDir(), "");

                // remove any trailing slashes.
                if (relativePath.startsWith("/")) {
                    relativePath = relativePath.substring(1);
                }

                model.addElement(relativePath);
            }

            materialsComboBox.setModel(model);

        }

        try {
            setValue((Material) getter.invoke(parent));
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void setValue(Material value) {
        super.setValue(value);

        if (!isBinded()) {

            SwingUtilities.invokeLater(() -> {

                materialsComboBox.setSelectedItem(value.getMaterialDef().getAssetName());

                bind();
            });
        }
    }

    @Override
    public void bind() {
        super.bind();

        materialsComboBox.addActionListener(e -> {

            String selectedMaterial = (String) materialsComboBox.getSelectedItem();

            AssetManager assetManager = ServiceManager.getService(JmeEngineService.class).getAssetManager();

            Material material = null;

            if (selectedMaterial.endsWith("j3md")) {
                material = new Material(assetManager, selectedMaterial);
            } else if (selectedMaterial.endsWith("j3m")) {
                material = assetManager.loadMaterial(selectedMaterial);
            }

            setValue(material);
            selectionChanged(material);
        });

    }

    public void selectionChanged(Material material) {

    }


    @Override
    public JComponent getJComponent() {
        return contentPanel;
    }

    @Override
    public void cleanup() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Material");
        contentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        materialsComboBox = new JComboBox();
        contentPanel.add(materialsComboBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

}

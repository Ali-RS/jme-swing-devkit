package com.jayfella.importer.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jayfella.importer.config.DevKitConfig;
import com.jayfella.importer.service.JmeEngineService;
import com.jayfella.importer.service.SceneTreeService;
import com.jayfella.importer.service.ServiceManager;
import com.jayfella.importer.swing.ComponentUtilities;
import com.jayfella.importer.tree.spatial.NodeTreeNode;
import com.jme3.asset.ModelKey;
import com.jme3.scene.AssetLinkNode;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class AddAssetLinkNode {
    private JPanel rootPanel;
    private JList<String> modelsList;
    private JButton addLinkNodeButton;

    public AddAssetLinkNode(final NodeTreeNode nodeTreeNode) {

        List<Path> modelFiles = null;

        try {
            modelFiles = Files.walk(new File(DevKitConfig.getInstance().getProjectConfig().getAssetRootDir()).toPath())
                    .filter(p -> p.toString().endsWith(".j3o"))
                    .collect(Collectors.toList());

        } catch (IOException e) {
            e.printStackTrace();
        }

        if (modelFiles != null) {

            DefaultListModel<String> listModel = new DefaultListModel<>();

            for (Path path : modelFiles) {

                String relativePath = path.toString().replace(DevKitConfig.getInstance().getProjectConfig().getAssetRootDir(), "");

                // remove any trailing slashes.
                if (relativePath.startsWith("/")) {
                    relativePath = relativePath.substring(1);
                }

                listModel.addElement(relativePath);
            }

            modelsList.setModel(listModel);
        }

        addLinkNodeButton.addActionListener(e -> {

            // int[] indices = modelsList.getSelectedIndices();

            final String selectedModel = modelsList.getSelectedValue();

            if (selectedModel != null) {

                // disable the window
                ComponentUtilities.enableComponents(rootPanel, false);

                // then run this "later" so the GUI can display the "disabled" view now.
                SwingUtilities.invokeLater(() -> {

                    JmeEngineService engineService = ServiceManager.getService(JmeEngineService.class);
                    SceneTreeService treeService = ServiceManager.getService(SceneTreeService.class);

                    // Spatial model = engineService.getAssetManager().loadModel(selectedModel);
                    // AssetLinkNode assetLinkNode = new AssetLinkNode((ModelKey) model.getKey());

                    AssetLinkNode assetLinkNode = new AssetLinkNode();
                    assetLinkNode.addLinkedChild(new ModelKey(selectedModel));

                    assetLinkNode.attachLinkedChildren(engineService.getAssetManager());

                    treeService.addSpatial(assetLinkNode, nodeTreeNode);


                    JButton button = (JButton) e.getSource();
                    JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(button);
                    topFrame.dispose();

                });

            }

        });

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        modelsList = new JList();
        scrollPane1.setViewportView(modelsList);
        addLinkNodeButton = new JButton();
        addLinkNodeButton.setText("Add Link Node");
        rootPanel.add(addLinkNodeButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
